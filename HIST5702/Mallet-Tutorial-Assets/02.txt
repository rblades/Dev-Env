Technical Considerations

I need you to appreciate the technical considerations that went into this project. This chapter is not only practical for those interested in historical work online but allows us to reflect on the preparatory work and considerations that go into non-technical/software-driven historical work. Because historians can view coding and software so separately from historical work, we are more inclined to focus here on preparation and coding considerations. We must use this opportunity to reflect on digital workflows in light of traditional historical work.
The technical considerations and the historical presentation of this project are entangled. We cannot remove the context of an open access digital project from the history presented. We can also not remove the displayed user interface of a digital project from the code that constructs it.
How the Pembroke Soundscapes Project Works

I created this entire project using Github. I explain Github - its importance, affordances, limitations, and usage for this project - in the next section. For now, it is important to understand that Github is an online repository for source code used by developers for version control. And unless you pay for a private repository, all updates, comments, and issues are visible to the public.
In fact, Github was more than a version control element of this project. The goal was an attempt to do a public history project with a digital component. But a critical component was to have the public history drive the digital aspect. I was careful not to simply create a historical project with a digital component without intentionally combining the digital and the historical. The result was this meditation on open access. I acted in the 'public eye': I used publicly created and hosted source code to present a history that I consulted on with various stakeholders; I wrote ideas, notes, sketches, and plans in a publicly accesible open notebook; I wrote this entire reflection live online for people to read and comment; I shared research and archival photographs on social media, mainly Twitter and Facebook. This project is a community effort. I sought to document and make my research process transparent so that others could follow it, keep my work and historical claims in check, contribute feedback or stories, and potentially create new prjects from the source code. Yet as I discuss later in this chapter and the next, open access is not the utopic digital process we imagine of free and accessible data and information. Open access is complex, difficult to work with, and not the progressive solution to the modern capitalist age we ascribe to it. Regarding academia, open access is as susceptible to issues faced by scholars working in institutions, such as racial and gender identity, and audience recursion (the academic feedback loop). As I will discuss, open access is an art with contextual issues we must be aware of while working under its guise.
From the beginning, I wanted this project to be interactive. I deliberated over a number of digital platforms, which I discuss in Chapter 3. Yet I want to discuss briefly the framework that preceded my final design. The Digital Atlas of Egyptian Archaeology (DAEA) is a project of Matrix, the Center for the Digital Humanities at Michigan State University. DAEA uses Leaflet[http://leafletjs.com/], a free, open source javascript library to create interactive maps. I forked user Xtina-R's DAEA repository on Github, which has a history of forking of its own (I will discuss this further later in this chapter). As I modified the DAEA source code, however, I found that I wanted a more interactive platform. DAEA uses markers with popups containing information. Those popups link out further to simple static webpages containing text and images in an essay format. Dr. Graham suggested Jack Dougherty's Storymap, a scroll driven map based on Leaflet. I dropped DAEA as my framework and forked Dougherty's storymap. Storymap uses markers set to specific locations linked to each chapter on the right side of the page. As the user scrolls through the story on the right side, the map recentres on the appropriate marker. The user thus experiences a story related to space. The map also contains layers: historical maps of Pembroke that users can select to view and also change the opacity over the base map.
This being a soundscapes project, I needed my map to contain audio. I began recording audio using Open Data Kit (ODK), a mobile data collection framework. I wrote a tutorial for ODK here, but for now its important to understand that ODK is an open source framework that runs with an Android smartphone and send collected data to a database hosted through Google. I setup my device to record sound in groups with the ability to input metadata, such as description and time recorded.
For the purpose of this project, I could not rely on my own recordings. I needed to use a variety of sounds which were not currently available to me. In the spirit of open access, I used Free Sound - a website of free, crowdsourced sound recordings - to download sounds I needed. I then edited the downloaded sounds using Audacity, a free, open source audio editing software. Then I uploaded the soundclips to my storymap.
I worked with the source code of Doughtery's storyscroll - I understood the Leaflet library and how it functioned. Yet I could not predict if my users would immediately understand the map. I used a javascript plugin, Chardin JS, to overlay the map and timeline pages with instructions that loaded on startup.
Overlay instructions from Chardin JS.

Each company on the map also links out to a more comprehensive timeline. I deliberated over the best way to present publically consumable information For the timeline portion of the website, I modified the source code of a framework I found online to produce vertical timelines. After implementing the source code into my file structure, I modified the CSS to fit the theme of my website. Each company has a timeline on its own dedicated page. To upload content to each timeline file, I added text to each HTML element and, where appicable, added images to each timeline node. Lastly, I added Loudlinks, a javascript library that attaches sounds to HTML elements. I used Loudlinks to attach sounds to my timeline images. When a user hovers their mouse over an image, it triggers the sound I associated with it in the HTML file.
I hosted the repository on Github pages. Github offers each account a free 'domain' to host content in the form of [someprefix].github.io. I set up my domain at rblades.github.io. But rblades.github.io is not the best name for a project Pembroke's industrial past. Dr. Graham suggested I use my own domain which I run through Reclaim Hosting, to display my project. I created a new domain pembrokesoundscapes.ca and updated my repository's Domain Name System (DNS) to point to my new pembrokesoundscapes.ca domain. But I soon faced a critical issue with open access: negotiating free hosting. Github's free repositories are limited to 1GB. My final repository was around 2.5GB. I tried using Github's Large File Storage to compress my image and sound files. But it could only compress by repo to 1.6GB and my account was temporarily suspended for exceeding my limit.
I migrated my repository directly to my domain since I have 10GB to host files. The repository remains available on Github, but I had to remove all media files to avoid exceeding my respository limit. The Github repository now contains the framework as a package for others to fork.
Changes to the Source Code

When I was originally working with DAEA, the only essential changes to the source code were to index.html and projects.html. The projects.html page The following code snippet was taken from index.html, the main page of rblades.github.io. I centred the longitude and latitude on Pembroke and changed the base and layered maps.
var map = L.map('map', {
    center: [45.8256661,-77.1182135],
    zoom: 13,
    layers:[
      L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner/{z}/{x}/{y}.png'),
      L.tileLayer('http://warp.worldmap.harvard.edu/maps/tile/4322/{z}/{x}/{y}.png')
    ]
});
The var map variable initiates the map in index.html and compiles data from other locations. The main changes that effect the map are stored in /sites/aa-sites-popup.csv. This CSV file contains the content for the map's popups. For DAEA, the CSV is a smart and sustainable method for a digital project. For open access we cannot only rely on sharing code. To increase the use of a project's framework - especially for humanities scholars with little to no technical background - we need to design it for a wider audience. Accessibility cannot only mean access to files and data, but making those files and data accessible to a wider audience. A CSV is a file containing comma separated text. Loaded into an editor like Excel, it resembles a normal spreadsheet with rows and columns. Each heading describes the type of data to be entered such as date, descriptive text, image source, etc.
Yet Leaflet is unable to process data in any other format than GeoJSON, a file type based on JSON (JavaScript Object Notation), a simple human and machine readable structure for data. The GeoJSON file contains critical information for the map's markers, most importantly the latitide and longitude of each location. Although JSON data is easy to write, it is not immediately as accesible to unfamiliar users as a CSV file. DAEA uses a Leaflet plugin called leaflet-omnivore that converts many formats for writing datasets into GeoJSON. This makes creating an interactive map more accessible to people with little technical background. The DAEA map is a great framework for an interactive historical project and process of open access. The project was created as a pedagogical opportunity in open access and remains open to be modified entirely.
But as my project developed, the public history influenced my decision to change my framework. The DAEA project interface was too static for my needs and the omnimore plugin to write my data in a CSV was limiting. Dr. Graham suggested Jack Doughtery's storymap. Storymap also runs on Leaflet except I had more control over the datasets because it used straight GeoJSON. That being said, I did not abandon DAEA entirely. I was not forking the project directly anymore nor did I fork and completely overhaul the entire project. I replaced my fork of the DAEA repository in my Github pages domain with Dougherty's storymap. But I retained the map overlay, a key element of DAEA. DAEA uses Harvard Map Warper, an online tool that converts standard image files to geo-rectified map layers. This means that when used with mapping software like Leaflet, the images will display over the map at the correct location and zoom in and out with the map.
I digitized two maps of Pembroke from the Carleton University Library. Then, I geo-rectified the images using Map Warper. Map Warper is an amazing tool with a user interface to convert images. But hand drawn maps are inconsistent compared to modern digital map APIs and thus do not match exactly against modern maps. Map warper uses control points to rectify an image of a map to fit a digital map. By using a modern sattelite map as reference to any user uploaded image, Map Warper repeats the idea that sattelite images are 'true' representations of landscape. I problematize and discuss the implications of digital map APIs in Chapter 3.
Map Warper: Add control points to geo-rectify an image as a map layer.

I added dozens of control points to each map to create an accurate map layer. When I added only several points, the converted image was skewed oblong over the base map since there was not enough geographic information to display accurately. I included those maps in my source code files.
The 'engine' of my interactive map is the script.js file. This javascript file includes all of the commands to run the map. This code 'injects' the Map Warper files into my map (NOTE: // is a javascript convention to comment on code. It has no effect on the final output and is purely for development purposes):
  // Harvard Map Warper Pemb 1967
  var Pemb1967 = new L.tileLayer('http://warp.worldmap.harvard.edu/maps/tile/5310/{z}/{x}/{y}.png', {
    attribution: '<a href="http://warp.worldmap.harvard.edu/</a>'
  });
  controlLayers.addOverlay(Pemb1967, 'Pembroke 1967');

  // Harvard Map Warper Pemb 1980
  var Pemb1980 = new L.tileLayer('http://warp.worldmap.harvard.edu/maps/tile/5312/{z}/{x}/{y}.png', {
    attribution: '<a href="http://warp.worldmap.hardvard.edu/</a>'
  });
  controlLayers.addOverlay(Pemb1980, 'Pembroke 1980');
This feature allows users to turn historical maps on and off, overlaying them onto the base map. The maps were included in full image opacity. But I wanted users to be able to control the opacity of each historical map layer to see how the geography changed over time. I added an opacity slider to my map using the following code:
// Opacity Slider
  var handle = document.getElementById('handle'),
    start = false,
    startTop;

  document.onmousemove = function(e) {
      if (!start) return;
      // Adjust control.
      handle.style.top = Math.max(-5, Math.min(195, startTop + parseInt(e.clientY, 10) - start)) + 'px';
      // Adjust opacity.
      Pemb1967.setOpacity(1 - (handle.offsetTop / 200));
      Pemb1980.setOpacity(1 - (handle.offsetTop / 200));
  };

  handle.onmousedown = function(e) {
      // Record initial positions.
      start = parseInt(e.clientY, 10);
      startTop = handle.offsetTop - 5;
      return false;
  };

  document.onmouseup = function(e) {
      start = null;
  };
This code targets the historical maps and isolates them when the opacity slider is moved up and down.
With my maps loaded, I needed to add audio to my storymap. Storymap initiates the map like DAEA, by loading the map variable in script.js as an HTML ID.
The final map

The map is hosted on my website from the map.html file. The map is built from commands in script.js which also initiates the GeoJSON data which relates the map markers to each chapter on the right side of the map. Storymap converts variables in script.js to HTML elements to display the GeoJSON data on my map. Each variable in script.js is structured to present the data within the GeoJSON file. This will become apparent below.
Storymap contained no audio functionality whatsoever. In script.js, I added the following variables to add audio functionality to the map:
  // Added description to add above audio controls to describe audio
  var audioDescription = $('<p></p>', {
    text: feature.properties['audioDescription'],
    class: 'audio-text'
  });

  // Added audio controls to play audio at each marker
  var audio = $('<audio></audio>', {
    src: feature.properties['audio'],
    controls: 'controls',
    preload: 'auto',
  });
The audioDescription variable is simply text to describe an audio clip. the audio variable, adds the HTML audio element to the map. Based on the variable structure, it will convert to the HTML element <audio src="" controls preload></audio>.
Lastly, I needed to append my new variables to the HTML container element that displays the map in map.html:
container.append(chapter).append(image).append(source).append(audioDescription).append(audio).append(description);
$('#contents').append(container);
Now, in the data.geojson file, after "source-link", as dictated by the order of appended variables in the above code, I add the following:
"audioDescription": "Listen to the past",
"audio": "[some audio file]",
In data.geojson I also need to add the appropriate chapter headings, descriptions, and images for each industry. Dougherty originally used the source variable in script.js to link to the URL source of each image. I used it to link each company to a more comprehensive timeline with more images and sounds.
The data.geojson file

Aside from building the actual website with the web development framework Bootstrap, I also made a lot of changes to other HTML and CSS (stylesheet) files. However, these are unnecessary to comment on here. If you would like to see the code in its entirety, see my repository on Github.
Understanding Github

According to Wired Magazine, Github "is the world’s biggest collection of open source software. Beyond providing installers for countless applications, Github hosts the source code for millions of projects, meaning anyone can read the code used to create those applications. And because Github also archives past versions of source code, it’s possible to follow the development of a particular piece of software and see how it all came together."1 Github is based on Git, a non-linear command line system used to manage the workflow of code.
Github in the command line

These commands allow users to fork code from other users' workflows, modify the code and then pull it back into the original stream. Github essentially adds a visual user interface to Git so users can upload, fork, edit, pull, and push code without working solely through a command line. Hence the "hub" in Github - a hub for users to fork and modify code, as well as create or change projects using git.
The Github app uses a Graphical User Interface rather than git commands

Understanding Github allows us to see that even code has a story. Written within each minor change to the original files (which can also include in-text comments from developers) are comments explaining choices. Writing code and managing entire projects on Github is a public performance involving people across the globe. Decisions are made and choices are justified. I can fork any repository and work with it however I want.
Digital Historiography

Perhaps we need to rethink traditional historiography in light of digital projects. Github - and other digital workflows (eg. open notebooks documenting work) - allows us to follow a project from its online origins. The point of open access in the Humanities is to publish your process, allowing others to check and reproduce your work. The goal here is to avoid the traditional historian's method: to hide your work until you publish a paper to be read within academia. When I fork a repository to create a project of my own, there are a number of different groups and people who have already used this code. I am not just changing the original project to fit my needs, but I am changing the history of the project. When I worked with the DAEA repository, I was not working with the original. The source code was created by Ethan Watrall of Michian State University and his students. Dr. Graham forked the repository for his own needs and one of his students, Github user Xtina-R forked the repository from Dr. Graham. Then I forked Xtina-R's repository. When I decided to use Dougherty's storymap, I began a new project stream. I forked my project from Dougherty's repository. Now, here is where the digital trail becomes a bit muddy. Dougherty based his project on another storymap on Github. But he did not fork the repository. Rather he created a new repository and uploaded his source code (though he references where he adapated the code). In fact, the code Dougherty adapted is itself based off of another project hosted on Mapbox, another open source library for interactive maps. This is an important point: Github is based on human input and if someone copies code instead of forking it, there will be no immediately visible trail.
To date, none of these forks have been pulled back into the original DAEA project stream. They all exist as separate projects. These projects are entangled in their own histories that are carried over and modified when a new user forks the repository. In fact, although my storymap is not a fork of DAEA, I used and modfified the map layers from Xtina-R's repository. We cannot, then, gloss over the context in which we create digital projects. Github is as much a part of the historiography of this project as the sources upon which I establish Pembroke's history. The git workflow drives both the work I do as well as the structure of code.
In Github, I do not explain specific changes to the source code merely so that others can replicate this project. In fact, my primary concern when committing changes on Github fluctuates between a desire for others to further this project - in Pembroke or elsewhere - and creating a log that I can return to if I need information for developing my code. I document all versions, commits, pull requests, and changes. But I am just documenting code changes and comments, and not necessarily context. It is here that we see the limitations of digital workflows for historiography. I am not honestly scrutinizing every piece of code here. Sometimes I get lazy and write a short summary that will help me in the future, but has no context for others looking at my project. I mainly scrutinize code when I make changes. I do not go through every change and study it. Rather, you can see where I have made changes. Github offers an open log to revisit decisions and reflect on choice.
One lesson from my process is to document carefully. If I could go back, I would record every change I made in detail. The great thing about Github, though, is that it shows colour-coded changes between file versions. This makes written comments less necessary.
An example of Github's Graphical User Interface when viewing changes between versions

This leads to the importance of documenting your workflow elsewhere. Github is just one online location - git, just one method - to document your workflow. An online open research notebook allowed me to contextualize my project's workflow by posting research notes, ideas, methods, and to comment on my process.
Online writing: GitBook and an Open Research Notebook

I wrote this book using GitBook, an online open editor for creating electronic books to download or read online. GitBook uses Markdown, a simple markup language used to write pages in Github.
This is the page you are currently reading, in Markdown

Markdown automates a lot of tasks (ex.). Prior to using GitBook, I had used markdown writing an ODK tutorial for programminghistorian.com. Markdown aside, GitBook's best feature is that it runs through Github. That means everytime I write and save, it automatically syncs using git, so there is no command line interface.
I gave my supervisor Dr. Graham read and write access to this GitBook. Dr. Graham suggested I write using GitBook to further align my project with open access philosophy. In fact, Dr. Graham had just finished co-authoring a book Exploring Big Historical Data: The Historian’s Macroscope completely open to the public. His book was not written using GitBook, but the idea was much the same. Any person with a link to this book has access to read as I write. They can even comment on individual paragraphs if they are signed into GitBook. But in reality, who is actually reading my work? 'The digital' does not magically change academic work into interesting writing that the whole world wants to read. Open access does not automatically dissolve the academic feedback loop where one's work will only ever be read by a small group of academics. Graduate writing is still graduate writing. My GitBook analytics, however, were quite surprising. As of February 2016, I had over nearly 700 visits, with 284 unique visits. Most of those visits came from Twitter, meaning my social media marketing had worked. People visited the links I posted, though I was the only one interacting. This does not mean people stayed to read what I had wrote. But it means that I had at least widened my audience to levels unacheivable through traditional historical method.
Being a project about sound, I incorporated Soundcite - a tool that allows you to markup text with audio - into GitBook. After including Soundcite's Javascript and CSS into the header of each chapter, it functioned without issue. I was surprised how easily Soundcite incorporated into GitBook. GitBook is filled with bugs: I sometimes wrote for long periods of time without saving. When I finally did save, it crashed and I lost all of my work. As frustrating as this was, it helped me get into a habit of saving and committing constantly, which, if I want my process transparent and well documented, I should be doing often anyways.
Soundcite header information

I also published research notes online through Github using Pykwiki, a static website generator for markdown notes. Pykwiki runs through my open notebook repository. I write my notes in markdown with the notetaking app nvALT, setting these notes as my source files fr Pykwiki. Then, I just have to run a command at the pykwiki directory $ pykwiki cache which converts my markdown notes into HTML files for the pykwiki generator. Then I commit the changes to my open notebook repository on Github to upload my notes. This notebook is available at rblades.github.io/open-notebook.
As I discuss in the next chapter, publics will not suddenly graviate towards academic work solely because it is online. Open access is an art that requires us to be aware of both the context of our online interactions and the content we present. In many ways, what I did 'live' online that was most impactful was sharing in the Pembroke Facebook community I'm from Pembroke Ontario and I'm not Ashamed to Admit it.
It is thus apparent that with this project, open access is a historiographical idea. I am not just forking and modifying Github repositories. I am following in Dr. Graham's footsteps, using his ideas of open access writing my book online, using an open research notebook, and documenting my work. Without reducing the complexities of the spread of human ideas, imagine historiography as a git workflow, I have essentially forked a research method from Graham. I then modified its original structure. Through discussions with Graham, I can 'request' him to pull it back into the main 'flow' of that method. Graham might suggest specific changes, or may tell me to push it into a whole new project of its own.
The Problems of Open Access

It is now obvious that this project is not fully open access, nor should/could it be completely open. It is not fully open because I have created limitations in certain areas. For instance, only Dr. Graham and myself can make changes to the project. Everyone else can only comment on the GitBook. This is necessary for version control. Anyone can copy and create a GitBook exactly based on mine, but they do not have access to modify the original copy. Which leads to my next point that this project should not be entirely open access. The first consideration I put in the should not category (because I am not ontologically limited by anything) is ethical considerations. I only make a certain amount of information accessible online. This is as much an administrative issue as it is one of personal responibility. I am consciously choosing (by following Carleton's ethical guidelines) what of the interviews, sound recordings, personal information is published online in any format. Furthermore, published graduate work is published under specific licenses. My work MUST be in accordance with university rules. This in turn effects how 'open' this book can be. Regardless, this reflection is at least written in GitBook, though it may never be published officially as a GitBook. Ethics aside, writing openly is a performance, not a utopian achievment of complete internet freedom. It is political too - I meticulously choose what I write, when I write it, what I record, what sounds I create, . This project is as much a subjective historical piece as any other non-digital work. And I intend to keep it that way.
Next, this project cannot be enitrely open access. Sure, theoretically I can provide all the information and data that I desire. But open access is about reproducibility. Both digital literacy as well as access to computers and networks. How can we say the internet is an open bastion of information when globally access is limited by infrastructure and socio-economic positioning. It is both ignorant and arrogant to assume open access is entirely open. Even if everyone had the potential to see my project, I doubt few people would actually want to. Nor would they see the value in it. This project has primarily been shared on Twitter by myself and my supervisor. Several people have retweeted or liked it. The web of Twitter is deeply connected. People I may never meet or follow on Twitter may see tweets about my project. Using a simple network analysis, you can imagine then that hundreds of people might see my tweet. Yet how many of those people will consciously stop and click on my tweet to find out more. Who, then, is this project actually open for? Primarily other historians and researchers. And there is nothing wrong with that fact. We must, however recognize that any project claiming to be 'open' is limited by these complexities.
When working with open access, we must remain sensitive to real and potential users. One of the biggest issues developing this project was compatibility and accesibility. The machine you use creates a different digital environment than the machine on which I developed this project. I am using a MacBook Pro with high processing speeds, on a good network, testing in the latest versions of Firefox, Safari, and Google Chrome's developer browser Canary. My environment is, in so many words, modern. But I have to develop for a prospective audience using a variety of digital environments and platforms. All web developers have to account for outdated browsers. Internet Explorer is the biggest culprit for inaccesibile and incompatible web content. I state on my home page that users should upgrade or update their browsers and I suggest Chrome as the optimal browser to view my website.
I struggled to make information consumable and geared towards my stakeholders versus creating this project entirely as I wanted to. There is a huge digital negotiation anticipating platforms in a public history project. The line is grey between 'public history' and 'regular history' because of the potential each digital project has to be viewed by the public. Digital history is a public history. Here, a public history digital project is one that accounts, expects, and must be built for a wider community usage rather than just a project that works on your machine. In other words, it means taking into account a range of accessibility issues rather than building solely around your platform.
Yet at some point, you cannot fully sacrifice a project to satisfy outdated or poorly supported browsers. There is some functionality in my website that may slow with poor bandwidth or poor functioning browsers like Internet Explorer or Opera. The images and sound files alone require a lot of bandwidth. The animated JQuery (a javascript language) scripting that moves both the map and the scroll effects throughout the website. On the other hand, with a project involving open access and reproducibility, I cannot create a completely experimental design that is only supported by ultra-modern browsers with full support, run on a machine with high working memory, and a network with consistent speeds. I tried to account for these issues by configuring the website for all major browser standards, as well as offering this project to be downloaded as a desktop app. I used Twine Wrapper, a command line package meant to package Twine interactive fiction stories in HTML as a standalone desktop app. Now, I am also changing the history of the Twine Wrapper since it also converts my HTML website. Therefore, aside from an initial download, I remove network issues from running this project online. In a typical website, a server hosts all files which are called by the user only when needed. For instance, your computer does not preload all the pages of a website. Rather, when you click a link to go to the next page of the website, it sends a request to the server for that page. A desktop application is completely self contained. It only confronts the machine's affordances and limitations. A desktop application is not the perfect solution to my problems, but no solution can account for every user's situation.
Regardless of the solutions to these problems, every project has its limitations. I had less control than I needed over my project with the storymap source code because it is controlled through javascript. I could have completely overhauled the project, designing it so that the map is primarily controlled through HTML elements with GeoJSON rather than javascript controlling HTML interpreted through GeoJSON. There were other options to present an interactive story-driven map (see Typmanus' experimental code which runs only on specific browsers). Yet aside from making a widely accessible website, the point of this project was to experiment with open access, forking someone else's code. The Leaflet javascript library that serves as the engine for my scroll driven map is entirely open source - meaning anyone can build upon it, making it there own - has full documentation, is used widely across many disciplines, and, therefore, has a great support community that consistently designs and produces new features.
Working Online as a White Male Academic

An accessible, digital workflow is hard to master. You have to commit your work often with sufficient explanation, remember to document specific methods and ideas applicable to your projects for others to critique and reproduce, and make your unfinished ideas, writing, and projects open for critique. What I chose to document was not always a deliberation over identity. Often, I poorly recorded my steps or did not believe certain processes were necessary to the project (or they would later become necessary). But this is still telling of my identity - that I was afforded the opportunity to not post something due to lazy documentation rather than a deliberation over how what I post would effect me.
One's identity also effects your workflow and thus to what degree your project is open access. Relying on the university's newspaper database, and searching microfilm at the Library and Archives in Ottawa is not the open access we dream of. Open access should be about easy access to information. I had access to resources through the school library. I used databases inaccessible to anyone outside of my institution. Reproducable work should be easy to access and historians must remember that we work within institutions with particular affordances. But even accessible newspaper databases ProQuest often removed articles I examined from their context. Open access, then, is not necessarily geared towards the humanities. Many services like ProQuest follow a particular philosophy of digitization carried over from STEM fields - that text is just information and can be scraped, run through an Ocular Character Recognition Software, and output as text. The newspaper, though, is a graphical artefact and its meaning changes on a computer screen output as text and presented in a new context with new styles. Thus we must be aware of how much open access influences our narrative: I use what I can find based on availability. A local Pembroke Historian, Jackie Patterson remarked to me that Pembroke has such a small recorded history. I was in many cases driven by newspaper articles and government labour files on strikes and lockouts. This worked to my advantage since I wanted this project to showcase the uneasy labour history of Pembroke's industry. But even strikes were not always front page news in Pembroke newspapers. Newspapers are the majority of sources I have. I piece together this history with my sources and begin to locate sound in space; this is all an act of historical imagination. I did not find the neat history I was looking for of newspapers mentioning "the sounds of strikers were heard around the town today". It's not bad for historians to have assumptions - that is how we find patterns in our sources. However, historians cannot rely on assumptions. Assumptions can help us begin our work, but we cannot fit our history into those initial assumptions.
It is obvious that this project confronts many technical considerations, limtations, and issues behind its open access philosophy. I have described my . But what about the academic public for whom I write? A great question was raised by one of my peripheral online communities, The Programming Historian website. I contributed an Open Data Kit tutorial to their website which I used to record sounds for this project. Adam Crymble asked in the Programming Historian Github issues section how they can become more friendly for women to contribute. This is an interesting use of Github's issues section. Users and deveopers are supposed to submit bugs, errors, and suggestions to the issues section of a Github repository. But the Programming Historian uses it to discuss social issues surrounding their site. Miriam Posner responded that "Github is an unfamiliar, opaque platform to many people, and women have well-supported reasons for declining to participate in unfamiliar digital platforms." My identitiy affords me the opportunity to contribute to the Programming Historian via Github without thinking of potential reprocussions.
Posner continued, "I don't actually think that we should abandon Github; I think it's a great way to streamline our editorial processes and it's been working well. It's just that, realistically, we should understand that a lot of women are not going to be super-stoked about signing up for another online platform, participation in which may or may not expose them to all of the myriad offensive behaviors women encounter online." Posner raises a great point here. Gender issues are not just an issue for the Programming Historian but for open access throughout online communities like Github. It is obvious that online bigotry and the potential for harrasement keeps women from contributing to Github. Several users commented that the issue page itself was under-represented by women because it was visible to the public. Crymble created an anonymous survey for anyone to contribute responses.
Several solutions resulted from this issue. Ian Milligan suggested that editors work with people in the pre-submission stage through email, thus retaining contributors' privacy. Other users created a mentorship gathering which, although it meets in England, is an attempt to make safe digital spaces. Yet as several users noted, the contributions to that Github issue were mostly male. The editors and contributors of the Programming Historian have at least started a dialogue and offered potential solutions to these issues.
I must be aware of my identity writing live online, sharing notes and ideas. I am able to fail big because of my identity. We have to be critical of open access because it is so easy for proponents of it to accept it without criticism. It is easy for a white male on the internet to form ideas that the web is an open utopia for the free exchange of knowledge, data, and information. When doing open access, we must abandon any imagination of an entirely free and open internet, made better simply by making everything accessible. I am not arguing that this is an ideal we should not strive for. Rather, we should approach open access with an awareness of the context in which we do historical work. And this is not necessarily a new approach in historical theory. Historians are already taught to examine their research process through their contingency: our situations and identity influence the history we write; how we access sources changes the stories we tell. The so called 'digital' is often praised by humanities scholars for its openness and potential to present history in amazing ways. In many cases this is true. But this imagined reality exist for those
Falling without direction

As you can see by now, this project did not simply begin with a proposal to my supervisor. The constant fluctuation of ideas, philosophies, and research methods shifted this project around, becoming entangled in my process and thus the history presented to users. I developed certain skill sets to this project and challenged ideas. The peripheral always seeks the centre. Mere interests, skills, and related projects fell together in a great clash. I used research methods like ODK I had developed months before this project began; I applied my knowledge of Bootstrap to web development, developed my javascript skills, and learned Leaflet's javascript library.
As I discuss in the next chapter, the limitations of the openness of my project are actually affordances to public history. It allows us to reflect on the meaning of public history and ask who our public(s) really is(are) - who are we writing for/about? I am deeply a part - not 'apart' - of the publics for whom this project was created. In the end, all I could do was carefully considered the openness of this project and remain sensitive to the people who will view it. And it is the most open work I have ever done.
Footnotes

1 http://www.wired.com/2015/06/problem-putting-worlds-code-github/